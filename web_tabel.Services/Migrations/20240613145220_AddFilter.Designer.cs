// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using web_tabel.Services.TimeShiftContext;

#nullable disable

namespace web_tabel.Services.Migrations
{
    [DbContext(typeof(TimeShiftDBContext))]
    [Migration("20240613145220_AddFilter")]
    partial class AddFilter
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("web_tabel.Domain.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("FilterId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("FilterId");

                    b.HasIndex("RoleName");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("web_tabel.Domain.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CompositeFilterId")
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentFilterId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompositeFilterId");

                    b.HasIndex("DepartmentFilterId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("web_tabel.Domain.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StaffScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TypeOfEmploymentName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("WorkScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("StaffScheduleId");

                    b.HasIndex("TypeOfEmploymentName");

                    b.HasIndex("WorkScheduleId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("web_tabel.Domain.EmployeeCondition", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TypeOfWorkingTimeName")
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("Name");

                    b.HasIndex("TypeOfWorkingTimeName");

                    b.ToTable("EmployeeCondition");
                });

            modelBuilder.Entity("web_tabel.Domain.EmployeeState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConditionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ConditionName");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeStates");
                });

            modelBuilder.Entity("web_tabel.Domain.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CompositeFilterId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrganizationFilterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompositeFilterId");

                    b.HasIndex("OrganizationFilterId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("web_tabel.Domain.Role", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DaysCount")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("HasRestriction")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApproving")
                        .HasColumnType("bit");

                    b.HasKey("Name");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("web_tabel.Domain.StaffSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("NumberOfPositions")
                        .HasColumnType("real");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("WorkScheduleId");

                    b.ToTable("StaffSchedules");
                });

            modelBuilder.Entity("web_tabel.Domain.TimeShift", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("HoursPlanned")
                        .HasColumnType("real");

                    b.Property<float>("HoursWorked")
                        .HasColumnType("real");

                    b.Property<Guid>("TimeShiftPeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TypeEmploymentPlannedName")
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("TypeEmploymentWorkedName")
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime>("WorkDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("WorkScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TimeShiftPeriodId");

                    b.HasIndex("TypeEmploymentPlannedName");

                    b.HasIndex("TypeEmploymentWorkedName");

                    b.HasIndex("WorkScheduleId");

                    b.ToTable("TimeShifts");
                });

            modelBuilder.Entity("web_tabel.Domain.TimeShiftPeriod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Closed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("TimeShiftPeriods");
                });

            modelBuilder.Entity("web_tabel.Domain.TypeOfEmployment", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Name");

                    b.ToTable("TypeOfEmployments");
                });

            modelBuilder.Entity("web_tabel.Domain.TypeOfWorkingTime", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("ColorText")
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Name");

                    b.ToTable("TypeEmployments");
                });

            modelBuilder.Entity("web_tabel.Domain.TypeOfWorkingTimeRules", b =>
                {
                    b.Property<string>("SourceName")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("TargetName")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("SourceName", "TargetName");

                    b.HasIndex("TargetName");

                    b.ToTable("TypeOfWorkingTimeRules");
                });

            modelBuilder.Entity("web_tabel.Domain.UserFilters.Filter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FilterType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Filters");

                    b.HasDiscriminator<string>("FilterType").HasValue("Filter");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("web_tabel.Domain.WorkSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("HoursInWeek")
                        .HasColumnType("real");

                    b.Property<bool>("IsWeekly")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReferenceDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("WorkSchedules");
                });

            modelBuilder.Entity("web_tabel.Domain.WorkingCalendar", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Date");

                    b.HasIndex(new[] { "Year" }, "IX_WorkingCalendar_Year");

                    b.ToTable("WorkingCalendar");
                });

            modelBuilder.Entity("web_tabel.Domain.UserFilters.CompositeFilter", b =>
                {
                    b.HasBaseType("web_tabel.Domain.UserFilters.Filter");

                    b.Property<string>("DepartmentIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Filters", t =>
                        {
                            t.Property("DepartmentIds")
                                .HasColumnName("CompositeFilter_DepartmentIds");
                        });

                    b.HasDiscriminator().HasValue("Composite");
                });

            modelBuilder.Entity("web_tabel.Domain.UserFilters.DepartmentFilter", b =>
                {
                    b.HasBaseType("web_tabel.Domain.UserFilters.Filter");

                    b.Property<string>("DepartmentIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Department");
                });

            modelBuilder.Entity("web_tabel.Domain.UserFilters.OrganizationFilter", b =>
                {
                    b.HasBaseType("web_tabel.Domain.UserFilters.Filter");

                    b.Property<string>("OrganizationIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Filters", t =>
                        {
                            t.Property("OrganizationIds")
                                .HasColumnName("OrganizationFilter_OrganizationIds");
                        });

                    b.HasDiscriminator().HasValue("Organization");
                });

            modelBuilder.Entity("web_tabel.Domain.AppUser", b =>
                {
                    b.HasOne("web_tabel.Domain.UserFilters.Filter", "Filter")
                        .WithMany()
                        .HasForeignKey("FilterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("web_tabel.Domain.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Filter");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("web_tabel.Domain.Department", b =>
                {
                    b.HasOne("web_tabel.Domain.UserFilters.CompositeFilter", null)
                        .WithMany("Departments")
                        .HasForeignKey("CompositeFilterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("web_tabel.Domain.UserFilters.DepartmentFilter", null)
                        .WithMany("Departemnts")
                        .HasForeignKey("DepartmentFilterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("web_tabel.Domain.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("web_tabel.Domain.Employee", b =>
                {
                    b.HasOne("web_tabel.Domain.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("web_tabel.Domain.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("web_tabel.Domain.StaffSchedule", "StaffSchedule")
                        .WithMany()
                        .HasForeignKey("StaffScheduleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("web_tabel.Domain.TypeOfEmployment", "TypeOfEmployment")
                        .WithMany()
                        .HasForeignKey("TypeOfEmploymentName");

                    b.HasOne("web_tabel.Domain.WorkSchedule", "WorkSchedule")
                        .WithMany()
                        .HasForeignKey("WorkScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("web_tabel.Domain.EmployeeName", "Name", b1 =>
                        {
                            b1.Property<Guid>("EmployeeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("MiddleName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("EmployeeId");

                            b1.ToTable("EmployeeNames");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId");
                        });

                    b.Navigation("Department");

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("StaffSchedule");

                    b.Navigation("TypeOfEmployment");

                    b.Navigation("WorkSchedule");
                });

            modelBuilder.Entity("web_tabel.Domain.EmployeeCondition", b =>
                {
                    b.HasOne("web_tabel.Domain.TypeOfWorkingTime", "TypeOfWorkingTime")
                        .WithMany()
                        .HasForeignKey("TypeOfWorkingTimeName");

                    b.Navigation("TypeOfWorkingTime");
                });

            modelBuilder.Entity("web_tabel.Domain.EmployeeState", b =>
                {
                    b.HasOne("web_tabel.Domain.EmployeeCondition", "EmployeeCondition")
                        .WithMany()
                        .HasForeignKey("ConditionName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("web_tabel.Domain.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("EmployeeCondition");
                });

            modelBuilder.Entity("web_tabel.Domain.Organization", b =>
                {
                    b.HasOne("web_tabel.Domain.UserFilters.CompositeFilter", null)
                        .WithMany("Organizations")
                        .HasForeignKey("CompositeFilterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("web_tabel.Domain.UserFilters.OrganizationFilter", null)
                        .WithMany("Organizations")
                        .HasForeignKey("OrganizationFilterId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("web_tabel.Domain.StaffSchedule", b =>
                {
                    b.HasOne("web_tabel.Domain.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("web_tabel.Domain.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("web_tabel.Domain.WorkSchedule", "WorkSchedule")
                        .WithMany()
                        .HasForeignKey("WorkScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Organization");

                    b.Navigation("WorkSchedule");
                });

            modelBuilder.Entity("web_tabel.Domain.TimeShift", b =>
                {
                    b.HasOne("web_tabel.Domain.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("web_tabel.Domain.TimeShiftPeriod", "TimeShiftPeriod")
                        .WithMany()
                        .HasForeignKey("TimeShiftPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("web_tabel.Domain.TypeOfWorkingTime", "TypeEmploymentPlanned")
                        .WithMany()
                        .HasForeignKey("TypeEmploymentPlannedName");

                    b.HasOne("web_tabel.Domain.TypeOfWorkingTime", "TypeEmploymentWorked")
                        .WithMany()
                        .HasForeignKey("TypeEmploymentWorkedName");

                    b.HasOne("web_tabel.Domain.WorkSchedule", "WorkSchedule")
                        .WithMany()
                        .HasForeignKey("WorkScheduleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("TimeShiftPeriod");

                    b.Navigation("TypeEmploymentPlanned");

                    b.Navigation("TypeEmploymentWorked");

                    b.Navigation("WorkSchedule");
                });

            modelBuilder.Entity("web_tabel.Domain.TypeOfWorkingTimeRules", b =>
                {
                    b.HasOne("web_tabel.Domain.TypeOfWorkingTime", "Source")
                        .WithMany()
                        .HasForeignKey("SourceName")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("web_tabel.Domain.TypeOfWorkingTime", "Target")
                        .WithMany()
                        .HasForeignKey("TargetName")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Source");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("web_tabel.Domain.WorkSchedule", b =>
                {
                    b.OwnsMany("web_tabel.Domain.WorkSchedulleHours", "HoursByDayNumbers", b1 =>
                        {
                            b1.Property<Guid>("WorkScheduleId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("DayNumber")
                                .HasColumnType("int");

                            b1.Property<string>("TypeOfWorkingTimeName")
                                .HasColumnType("nvarchar(3)");

                            b1.Property<float>("Hours")
                                .HasColumnType("real");

                            b1.HasKey("WorkScheduleId", "DayNumber", "TypeOfWorkingTimeName");

                            b1.HasIndex("TypeOfWorkingTimeName");

                            b1.ToTable("WorkSchedulleHours");

                            b1.HasOne("web_tabel.Domain.TypeOfWorkingTime", "TypeOfWorkingTime")
                                .WithMany()
                                .HasForeignKey("TypeOfWorkingTimeName")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("WorkScheduleId");

                            b1.Navigation("TypeOfWorkingTime");
                        });

                    b.Navigation("HoursByDayNumbers");
                });

            modelBuilder.Entity("web_tabel.Domain.UserFilters.CompositeFilter", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("web_tabel.Domain.UserFilters.DepartmentFilter", b =>
                {
                    b.Navigation("Departemnts");
                });

            modelBuilder.Entity("web_tabel.Domain.UserFilters.OrganizationFilter", b =>
                {
                    b.Navigation("Organizations");
                });
#pragma warning restore 612, 618
        }
    }
}
