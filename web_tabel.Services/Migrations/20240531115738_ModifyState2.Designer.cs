// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using web_tabel.Services.TimeShiftContext;

#nullable disable

namespace web_tabel.Services.Migrations
{
    [DbContext(typeof(TimeShiftDBContext))]
    [Migration("20240531115738_ModifyState2")]
    partial class ModifyState2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("web_tabel.Domain.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("web_tabel.Domain.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StaffScheduleId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TypeOfEmploymentName")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("WorkScheduleId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("StaffScheduleId");

                    b.HasIndex("TypeOfEmploymentName");

                    b.HasIndex("WorkScheduleId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("web_tabel.Domain.EmployeeCondition", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("TypeOfWorkingTimeName")
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.HasIndex("TypeOfWorkingTimeName");

                    b.ToTable("EmployeeCondition");
                });

            modelBuilder.Entity("web_tabel.Domain.EmployeeState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConditionName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConditionName");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeStates");
                });

            modelBuilder.Entity("web_tabel.Domain.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("web_tabel.Domain.StaffSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("NumberOfPositions")
                        .HasColumnType("REAL");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("WorkScheduleId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("WorkScheduleId");

                    b.ToTable("StaffSchedules");
                });

            modelBuilder.Entity("web_tabel.Domain.TimeShift", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("TEXT");

                    b.Property<float>("HoursPlanned")
                        .HasColumnType("REAL");

                    b.Property<float>("HoursWorked")
                        .HasColumnType("REAL");

                    b.Property<Guid>("TimeShiftPeriodId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TypeEmploymentPlannedName")
                        .HasColumnType("TEXT");

                    b.Property<string>("TypeEmploymentWorkedName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("WorkDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("WorkScheduleId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TimeShiftPeriodId");

                    b.HasIndex("TypeEmploymentPlannedName");

                    b.HasIndex("TypeEmploymentWorkedName");

                    b.HasIndex("WorkScheduleId");

                    b.ToTable("TimeShifts");
                });

            modelBuilder.Entity("web_tabel.Domain.TimeShiftPeriod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Closed")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("End")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Start")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TimeShiftPeriods");
                });

            modelBuilder.Entity("web_tabel.Domain.TypeOfEmployment", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.ToTable("TypeOfEmployments");
                });

            modelBuilder.Entity("web_tabel.Domain.TypeOfWorkingTime", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("ColorText")
                        .HasMaxLength(7)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.ToTable("TypeEmployments");
                });

            modelBuilder.Entity("web_tabel.Domain.WorkSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<float>("HoursInWeek")
                        .HasColumnType("REAL");

                    b.Property<bool>("IsWeekly")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ReferenceDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("WorkSchedules");
                });

            modelBuilder.Entity("web_tabel.Domain.WorkingCalendar", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Date");

                    b.HasIndex(new[] { "Year" }, "IX_WorkingCalendar_Year");

                    b.ToTable("WorkingCalendar");
                });

            modelBuilder.Entity("web_tabel.Domain.Department", b =>
                {
                    b.HasOne("web_tabel.Domain.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("web_tabel.Domain.Employee", b =>
                {
                    b.HasOne("web_tabel.Domain.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("web_tabel.Domain.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("web_tabel.Domain.StaffSchedule", "StaffSchedule")
                        .WithMany()
                        .HasForeignKey("StaffScheduleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("web_tabel.Domain.TypeOfEmployment", "TypeOfEmployment")
                        .WithMany()
                        .HasForeignKey("TypeOfEmploymentName");

                    b.HasOne("web_tabel.Domain.WorkSchedule", "WorkSchedule")
                        .WithMany()
                        .HasForeignKey("WorkScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("web_tabel.Domain.EmployeeName", "Name", b1 =>
                        {
                            b1.Property<Guid>("EmployeeId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<Guid>("Id")
                                .HasColumnType("TEXT");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("MiddleName")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("EmployeeId");

                            b1.ToTable("EmployeeNames");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId");
                        });

                    b.Navigation("Department");

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("StaffSchedule");

                    b.Navigation("TypeOfEmployment");

                    b.Navigation("WorkSchedule");
                });

            modelBuilder.Entity("web_tabel.Domain.EmployeeCondition", b =>
                {
                    b.HasOne("web_tabel.Domain.TypeOfWorkingTime", "TypeOfWorkingTime")
                        .WithMany()
                        .HasForeignKey("TypeOfWorkingTimeName");

                    b.Navigation("TypeOfWorkingTime");
                });

            modelBuilder.Entity("web_tabel.Domain.EmployeeState", b =>
                {
                    b.HasOne("web_tabel.Domain.EmployeeCondition", "Condition")
                        .WithMany()
                        .HasForeignKey("ConditionName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("web_tabel.Domain.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Condition");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("web_tabel.Domain.StaffSchedule", b =>
                {
                    b.HasOne("web_tabel.Domain.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("web_tabel.Domain.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("web_tabel.Domain.WorkSchedule", "WorkSchedule")
                        .WithMany()
                        .HasForeignKey("WorkScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Organization");

                    b.Navigation("WorkSchedule");
                });

            modelBuilder.Entity("web_tabel.Domain.TimeShift", b =>
                {
                    b.HasOne("web_tabel.Domain.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("web_tabel.Domain.TimeShiftPeriod", "TimeShiftPeriod")
                        .WithMany()
                        .HasForeignKey("TimeShiftPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("web_tabel.Domain.TypeOfWorkingTime", "TypeEmploymentPlanned")
                        .WithMany()
                        .HasForeignKey("TypeEmploymentPlannedName");

                    b.HasOne("web_tabel.Domain.TypeOfWorkingTime", "TypeEmploymentWorked")
                        .WithMany()
                        .HasForeignKey("TypeEmploymentWorkedName");

                    b.HasOne("web_tabel.Domain.WorkSchedule", "WorkSchedule")
                        .WithMany()
                        .HasForeignKey("WorkScheduleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("TimeShiftPeriod");

                    b.Navigation("TypeEmploymentPlanned");

                    b.Navigation("TypeEmploymentWorked");

                    b.Navigation("WorkSchedule");
                });

            modelBuilder.Entity("web_tabel.Domain.WorkSchedule", b =>
                {
                    b.OwnsMany("web_tabel.Domain.WorkSchedulleHours", "HoursByDayNumbers", b1 =>
                        {
                            b1.Property<Guid>("WorkScheduleId")
                                .HasColumnType("TEXT");

                            b1.Property<int>("DayNumber")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("TypeOfWorkingTimeName")
                                .HasColumnType("TEXT");

                            b1.Property<float>("Hours")
                                .HasColumnType("REAL");

                            b1.HasKey("WorkScheduleId", "DayNumber", "TypeOfWorkingTimeName");

                            b1.HasIndex("TypeOfWorkingTimeName");

                            b1.ToTable("WorkSchedulleHours");

                            b1.HasOne("web_tabel.Domain.TypeOfWorkingTime", "TypeOfWorkingTime")
                                .WithMany()
                                .HasForeignKey("TypeOfWorkingTimeName")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("WorkScheduleId");

                            b1.Navigation("TypeOfWorkingTime");
                        });

                    b.Navigation("HoursByDayNumbers");
                });
#pragma warning restore 612, 618
        }
    }
}
